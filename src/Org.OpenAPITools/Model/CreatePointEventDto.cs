/*
 * Earthpoints API
 *
 * Earthpoints API description
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreatePointEventDto
    /// </summary>
    [DataContract(Name = "CreatePointEventDto")]
    public partial class CreatePointEventDto : IEquatable<CreatePointEventDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePointEventDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePointEventDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePointEventDto" /> class.
        /// </summary>
        /// <param name="hashString">The hash string is used to make sure each event will only result in points awarded once. It should be unique for each event and user, in such a way the same hashString will predictably get generated if the same event was sent again. For example, it could be the string \&quot;created-pledge-page\&quot; followed by the user&#39;s id in another system. (required).</param>
        /// <param name="userid">Already existing User UUID in the system. One of this or an email is required..</param>
        /// <param name="email">Email to associate the points with. If an user with this email is not found, a new user will be created. One of this or an User UUID is required..</param>
        /// <param name="icon">Icon to display in web interface (Font Awesome version 6.0.0).</param>
        /// <param name="verb">The verb to display along with the point event in user interfaces. For example: \&quot;You connected Facebook\&quot; (required).</param>
        /// <param name="platform">Social platform (twitter, instagram, facebook) or other external platform where the event was awarded from (required).</param>
        /// <param name="message">Message to display to the user. (required).</param>
        /// <param name="isBurn">For awarding points, set this to false. Set to true if you want to consume points instead of awarding them (required).</param>
        /// <param name="points">Number of points to award for this event. (required).</param>
        /// <param name="timestamp">For displaying to the user, the related time when the points were awarded. (required).</param>
        /// <param name="metadata">Any custom metadata (required).</param>
        public CreatePointEventDto(string hashString = default(string), string userid = default(string), string email = default(string), string icon = default(string), string verb = default(string), string platform = default(string), string message = default(string), bool isBurn = default(bool), decimal points = default(decimal), DateTime timestamp = default(DateTime), Object metadata = default(Object))
        {
            // to ensure "hashString" is required (not null)
            if (hashString == null) {
                throw new ArgumentNullException("hashString is a required property for CreatePointEventDto and cannot be null");
            }
            this.HashString = hashString;
            // to ensure "verb" is required (not null)
            if (verb == null) {
                throw new ArgumentNullException("verb is a required property for CreatePointEventDto and cannot be null");
            }
            this.Verb = verb;
            // to ensure "platform" is required (not null)
            if (platform == null) {
                throw new ArgumentNullException("platform is a required property for CreatePointEventDto and cannot be null");
            }
            this.Platform = platform;
            // to ensure "message" is required (not null)
            if (message == null) {
                throw new ArgumentNullException("message is a required property for CreatePointEventDto and cannot be null");
            }
            this.Message = message;
            this.IsBurn = isBurn;
            this.Points = points;
            this.Timestamp = timestamp;
            // to ensure "metadata" is required (not null)
            if (metadata == null) {
                throw new ArgumentNullException("metadata is a required property for CreatePointEventDto and cannot be null");
            }
            this.Metadata = metadata;
            this.Userid = userid;
            this.Email = email;
            this.Icon = icon;
        }

        /// <summary>
        /// The hash string is used to make sure each event will only result in points awarded once. It should be unique for each event and user, in such a way the same hashString will predictably get generated if the same event was sent again. For example, it could be the string \&quot;created-pledge-page\&quot; followed by the user&#39;s id in another system.
        /// </summary>
        /// <value>The hash string is used to make sure each event will only result in points awarded once. It should be unique for each event and user, in such a way the same hashString will predictably get generated if the same event was sent again. For example, it could be the string \&quot;created-pledge-page\&quot; followed by the user&#39;s id in another system.</value>
        [DataMember(Name = "hashString", IsRequired = true, EmitDefaultValue = false)]
        public string HashString { get; set; }

        /// <summary>
        /// Already existing User UUID in the system. One of this or an email is required.
        /// </summary>
        /// <value>Already existing User UUID in the system. One of this or an email is required.</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public string Userid { get; set; }

        /// <summary>
        /// Email to associate the points with. If an user with this email is not found, a new user will be created. One of this or an User UUID is required.
        /// </summary>
        /// <value>Email to associate the points with. If an user with this email is not found, a new user will be created. One of this or an User UUID is required.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Icon to display in web interface (Font Awesome version 6.0.0)
        /// </summary>
        /// <value>Icon to display in web interface (Font Awesome version 6.0.0)</value>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// The verb to display along with the point event in user interfaces. For example: \&quot;You connected Facebook\&quot;
        /// </summary>
        /// <value>The verb to display along with the point event in user interfaces. For example: \&quot;You connected Facebook\&quot;</value>
        [DataMember(Name = "verb", IsRequired = true, EmitDefaultValue = false)]
        public string Verb { get; set; }

        /// <summary>
        /// Social platform (twitter, instagram, facebook) or other external platform where the event was awarded from
        /// </summary>
        /// <value>Social platform (twitter, instagram, facebook) or other external platform where the event was awarded from</value>
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = false)]
        public string Platform { get; set; }

        /// <summary>
        /// Message to display to the user.
        /// </summary>
        /// <value>Message to display to the user.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// For awarding points, set this to false. Set to true if you want to consume points instead of awarding them
        /// </summary>
        /// <value>For awarding points, set this to false. Set to true if you want to consume points instead of awarding them</value>
        [DataMember(Name = "isBurn", IsRequired = true, EmitDefaultValue = true)]
        public bool IsBurn { get; set; }

        /// <summary>
        /// Number of points to award for this event.
        /// </summary>
        /// <value>Number of points to award for this event.</value>
        [DataMember(Name = "points", IsRequired = true, EmitDefaultValue = false)]
        public decimal Points { get; set; }

        /// <summary>
        /// For displaying to the user, the related time when the points were awarded.
        /// </summary>
        /// <value>For displaying to the user, the related time when the points were awarded.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Any custom metadata
        /// </summary>
        /// <value>Any custom metadata</value>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePointEventDto {\n");
            sb.Append("  HashString: ").Append(HashString).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsBurn: ").Append(IsBurn).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePointEventDto);
        }

        /// <summary>
        /// Returns true if CreatePointEventDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePointEventDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePointEventDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HashString == input.HashString ||
                    (this.HashString != null &&
                    this.HashString.Equals(input.HashString))
                ) && 
                (
                    this.Userid == input.Userid ||
                    (this.Userid != null &&
                    this.Userid.Equals(input.Userid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Verb == input.Verb ||
                    (this.Verb != null &&
                    this.Verb.Equals(input.Verb))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.IsBurn == input.IsBurn ||
                    this.IsBurn.Equals(input.IsBurn)
                ) && 
                (
                    this.Points == input.Points ||
                    this.Points.Equals(input.Points)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HashString != null)
                {
                    hashCode = (hashCode * 59) + this.HashString.GetHashCode();
                }
                if (this.Userid != null)
                {
                    hashCode = (hashCode * 59) + this.Userid.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Verb != null)
                {
                    hashCode = (hashCode * 59) + this.Verb.GetHashCode();
                }
                if (this.Platform != null)
                {
                    hashCode = (hashCode * 59) + this.Platform.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsBurn.GetHashCode();
                hashCode = (hashCode * 59) + this.Points.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
